/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.util.List;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import dao.DaoGeneric;
import javax.swing.JOptionPane;
import model.clan;
import model.jugador;
import model.partides;

/**
 *
 * @author AluCiclesGS1
 */
public class principal extends javax.swing.JFrame {

    /**
     * Creates new form principal
     */
    public principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nom = new javax.swing.JTextField();
        nivell = new javax.swing.JTextField();
        copes = new javax.swing.JTextField();
        oro = new javax.swing.JTextField();
        gemes = new javax.swing.JTextField();
        estrelles = new javax.swing.JTextField();
        nomLabel = new javax.swing.JLabel();
        nivellLabel = new javax.swing.JLabel();
        copesLabel = new javax.swing.JLabel();
        oroLabel = new javax.swing.JLabel();
        gemesLabel = new javax.swing.JLabel();
        estrellesLabel = new javax.swing.JLabel();
        crearJugador = new javax.swing.JButton();
        idjug1Label = new javax.swing.JLabel();
        idjug2Label = new javax.swing.JLabel();
        resultatLabel = new javax.swing.JLabel();
        tipusLabel = new javax.swing.JLabel();
        crearPartida = new javax.swing.JButton();
        idjug1 = new javax.swing.JTextField();
        idjug2 = new javax.swing.JTextField();
        resultat = new javax.swing.JTextField();
        tipus = new javax.swing.JTextField();
        esborrarJugador = new javax.swing.JButton();
        idLable = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        actualitzarTaulaJug = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TaulaPartides = new javax.swing.JTable();
        esborrarPartida = new javax.swing.JButton();
        idLable2 = new javax.swing.JLabel();
        idPart = new javax.swing.JTextField();
        actualitzarTaulaPartides = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        TaulaJugadors = new javax.swing.JTable();
        tempsLable = new javax.swing.JLabel();
        temps = new javax.swing.JTextField();
        clanType = new javax.swing.JTextField();
        idAdmin = new javax.swing.JTextField();
        crearClan = new javax.swing.JButton();
        esborrarClan = new javax.swing.JButton();
        NomLable = new javax.swing.JLabel();
        idClan = new javax.swing.JTextField();
        NivellLable = new javax.swing.JLabel();
        idClanLable = new javax.swing.JLabel();
        idAdminLable = new javax.swing.JLabel();
        clanTypeLable = new javax.swing.JLabel();
        copasC = new javax.swing.JTextField();
        nomC = new javax.swing.JTextField();
        copasCLable = new javax.swing.JLabel();
        nivellC = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        taulaClan = new javax.swing.JTable();
        actualitzarTaulaClans = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        nom.setToolTipText("Nom");
        nom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomActionPerformed(evt);
            }
        });

        nivell.setToolTipText("Nivell");
        nivell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nivellActionPerformed(evt);
            }
        });

        copes.setToolTipText("Copes");

        oro.setToolTipText("Or");

        gemes.setToolTipText("Gemes");

        estrelles.setToolTipText("Estrelles");

        nomLabel.setText("Nom");

        nivellLabel.setText("Nivell");

        copesLabel.setText("Copes");

        oroLabel.setText("Or");

        gemesLabel.setText("Gemes");

        estrellesLabel.setText("Estrelles");

        crearJugador.setText("Crear Jugador");
        crearJugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearJugador(evt);
            }
        });

        idjug1Label.setText("idjug1");

        idjug2Label.setText("idjug2");

        resultatLabel.setText("Resultat");

        tipusLabel.setText("Tipus");

        crearPartida.setText("Crear Partida");
        crearPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearPartida(evt);
            }
        });

        idjug1.setToolTipText("idjug1");
        idjug1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idjug1ActionPerformed(evt);
            }
        });

        idjug2.setToolTipText("idjug2");
        idjug2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idjug2ActionPerformed(evt);
            }
        });

        resultat.setToolTipText("Resultat (? - ?)");

        tipus.setToolTipText("Tipus (amistos, lliga o torneig)");

        esborrarJugador.setText("Esborrar Jugador");
        esborrarJugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                esborrarJugador(evt);
            }
        });

        idLable.setText("id");

        id.setToolTipText("id del jugador a esborrar");

        actualitzarTaulaJug.setText("Actualitzar taula Jugadors");
        actualitzarTaulaJug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualitzarTaulaJug(evt);
            }
        });

        TaulaPartides.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "idjug1", "idjug2", "resultat", "temps", "tipus"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(TaulaPartides);

        esborrarPartida.setText("Esborrar Partida");
        esborrarPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                esborrarPartida(evt);
            }
        });

        idLable2.setText("id");

        idPart.setToolTipText("id del jugador a esborrar");

        actualitzarTaulaPartides.setText("Actualitzar taula Jugadors");
        actualitzarTaulaPartides.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualitzarTaulaPartides(evt);
            }
        });

        TaulaJugadors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "nom", "nivell", "copes", "oro", "gemes", "estrelles"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(TaulaJugadors);
        if (TaulaJugadors.getColumnModel().getColumnCount() > 0) {
            TaulaJugadors.getColumnModel().getColumn(1).setHeaderValue("nom");
            TaulaJugadors.getColumnModel().getColumn(2).setHeaderValue("nivell");
            TaulaJugadors.getColumnModel().getColumn(3).setHeaderValue("copes");
            TaulaJugadors.getColumnModel().getColumn(4).setResizable(false);
            TaulaJugadors.getColumnModel().getColumn(4).setHeaderValue("oro");
            TaulaJugadors.getColumnModel().getColumn(5).setHeaderValue("gemes");
            TaulaJugadors.getColumnModel().getColumn(6).setHeaderValue("estrelles");
        }

        tempsLable.setText("Temps");

        temps.setToolTipText("Temps (?:??  ---  MAX: 5:00)");

        clanType.setToolTipText("Tipus de Clan (Privat / Public)");

        idAdmin.setToolTipText("Id del administrador del Clan");

        crearClan.setText("Crear Clan");
        crearClan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearClan(evt);
            }
        });

        esborrarClan.setText("Esborrar Clan");
        esborrarClan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                esborrarClan(evt);
            }
        });

        NomLable.setText("Nom del Clan");

        idClan.setToolTipText("Id del Clan a eliminar");

        NivellLable.setText("Nivell");

        idClanLable.setText("idClan");

        idAdminLable.setText("Id del Admin");

        clanTypeLable.setText("Tipus de Clan");

        copasC.setToolTipText("Quantitat de copes del Clan");

        nomC.setToolTipText("Nom del Clan que es vol crear");

        copasCLable.setText("Copes del Clan");

        nivellC.setToolTipText("Nivell que te el Clan");

        taulaClan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "idClan", "nom", "nivell", "copas", "idAdmin", "tipusc"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(taulaClan);

        actualitzarTaulaClans.setText("Actualitzar Taula Clans");
        actualitzarTaulaClans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualitzarTaulaClans(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(idLable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(id))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(copesLabel)
                            .addComponent(oroLabel)
                            .addComponent(gemesLabel)
                            .addComponent(estrellesLabel)
                            .addComponent(nomLabel)
                            .addComponent(nivellLabel))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nivell, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(copes, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(oro, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(gemes, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(estrelles, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(nom))))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(esborrarJugador))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(crearJugador)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(crearPartida)
                                .addGap(39, 39, 39))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(79, 79, 79)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(idLable2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(idPart))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(idjug1Label)
                                            .addComponent(idjug2Label)
                                            .addComponent(resultatLabel)
                                            .addComponent(tipusLabel)
                                            .addComponent(tempsLable))
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(resultat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                            .addComponent(idjug1, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(idjug2, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(temps)
                                            .addComponent(tipus))))))
                        .addGap(75, 75, 75))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(esborrarPartida)
                        .addGap(108, 108, 108))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(actualitzarTaulaJug, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(actualitzarTaulaPartides, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(193, 193, 193))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(copasCLable)
                            .addComponent(NomLable)
                            .addComponent(NivellLable)
                            .addComponent(idAdminLable)
                            .addComponent(clanTypeLable))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clanType, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idAdmin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(copasC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nomC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nivellC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(crearClan)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(idClanLable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(idClan, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(esborrarClan)
                        .addGap(23, 23, 23)))
                .addGap(32, 32, 32))
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(actualitzarTaulaClans, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(crearJugador)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nomLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nivell, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nivellLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(copes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(copesLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(oro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(oroLabel))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(gemes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gemesLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(estrelles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(estrellesLabel))
                        .addGap(18, 18, 18)
                        .addComponent(esborrarJugador)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idLable)
                            .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(crearPartida)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idjug1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idjug1Label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idjug2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idjug2Label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(resultat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(resultatLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(temps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tempsLable))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tipus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tipusLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(esborrarPartida)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idLable2)
                            .addComponent(idPart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(35, 35, 35)
                .addComponent(actualitzarTaulaJug)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(actualitzarTaulaPartides)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(crearClan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NomLable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nivellC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NivellLable))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(copasC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(copasCLable))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idAdminLable))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(esborrarClan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idClan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idClanLable))
                        .addGap(14, 14, 14)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clanType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clanTypeLable))
                .addGap(18, 18, 18)
                .addComponent(actualitzarTaulaClans)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(85, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomActionPerformed

    private void nivellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nivellActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nivellActionPerformed

    private void idjug1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idjug1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idjug1ActionPerformed

    private void idjug2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idjug2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idjug2ActionPerformed

    private void crearJugador(java.awt.event.ActionEvent evt) { 
    try {
        // Creamos un nuevo objeto jugador con los datos proporcionados en los campos de texto de la interfaz gráfica
        jugador jug = new jugador(
            nom.getText(),  // Nombre del jugador
            Integer.parseInt(nivell.getText()),  // Nivel del jugador, convertido de String a int
            Integer.parseInt(copes.getText()),   // Copas del jugador, convertido de String a int
            Integer.parseInt(oro.getText()),    // Oro del jugador, convertido de String a int
            Integer.parseInt(gemes.getText()),  // Gemas del jugador, convertido de String a int
            Integer.parseInt(estrelles.getText())  // Estrellas del jugador, convertido de String a int
        );
        // Llamamos al método `create` de la clase `DaoGeneric` para almacenar el jugador en la base de datos
        DaoGeneric.getInstance().create(jug); 
        
        } catch (Exception e) {
            // Si ocurre un error al guardar el jugador (por ejemplo, datos no válidos), se muestra un mensaje de error
            JOptionPane.showMessageDialog(null, "Error al guardar " + e.getMessage());
        }
    }                             

    private void crearPartida(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearPartida
        try {        
        // Creamos un nuevo objeto partida con los datos proporcionados en los campos de texto de la interfaz gráfica
        partides part = new partides(
            Integer.parseInt(idjug1.getText()),  // Id jugador 1, convertido de String a int
            Integer.parseInt(idjug2.getText()),  // Id jugador 2, convertido de String a int
            resultat.getText(),   // Resultat de la partida
            temps.getText(),   // Temps de la partida
            tipus.getText()    // Tipus de partida
        );
        // Llamamos al método `create` de la clase `DaoGeneric` para almacenar la partida en la base de datos
        DaoGeneric.getInstance().create(part); 
        
        } catch (Exception e) {
            // Si ocurre un error al guardar el jugador (por ejemplo, datos no válidos), se muestra un mensaje de error
            JOptionPane.showMessageDialog(null, "Error al guardar " + e.getMessage());
        }
    }//GEN-LAST:event_crearPartida

    private void esborrarPartida(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_esborrarPartida
        try {
        // Obtenemos el id del jugador que se quiere eliminar desde el campo de texto
        int part = Integer.parseInt(idPart.getText()); 
        // Llamamos al método `delete` de la clase `DaoGeneric` para eliminar el jugador con el id especificado
        DaoGeneric.getInstance().deletePart(part);
        
        } catch (Exception e) {
            // Si ocurre un error (por ejemplo, el id no es válido o no se encuentra el jugador), se muestra un mensaje de error
            JOptionPane.showMessageDialog(null, "Error al eliminar " + e.getMessage());
        }
    }//GEN-LAST:event_esborrarPartida

    private void actualitzarTaulaPartides(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualitzarTaulaPartides
        // Obtenemos la lista de jugadores desde la base de datos mediante DaoGeneric
        List llista = (List) DaoGeneric.getInstance().readPartida();
        // Obtenemos el modelo de la tabla de jugadores en la interfaz gráfica
        DefaultTableModel model = (DefaultTableModel) TaulaPartides.getModel();
        // Limpiamos las filas actuales de la tabla
        model.setRowCount(0);

        // Iteramos sobre la lista de jugadores y agregamos cada jugador como una nueva fila en la tabla
        for (int i = 0; i < llista.size(); i++) {
            partides part = (partides) llista.get(i);  // Obtenemos un jugador de la lista
            Vector oneRow = new Vector();  // Creamos un vector que representa una fila en la tabla

            // Agregamos los datos del jugador a la fila (cada columna en la tabla)
            oneRow.add(Integer.toString(part.getId())); // Columna de Id
            oneRow.add(Integer.toString(part.getIdjug1()));  // Columna de Idjug1
            oneRow.add(Integer.toString(part.getIdjug2()));  // Columna de Idjug2
            oneRow.add(part.getResultat());  // Columna de Resultat
            oneRow.add(part.getTemps());  // Columna de Temps
            oneRow.add(part.getTipus());  // Columna de Tipus

            // Agregamos la fila a la tabla
            model.addRow(oneRow);
        }
        // Actualizamos el modelo de la tabla con los nuevos datos
        TaulaPartides.setModel(model);
    }//GEN-LAST:event_actualitzarTaulaPartides

    private void crearClan(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearClan
        try {
            // Creamos un nuevo objeto jugador con los datos proporcionados en los campos de texto de la interfaz gráfica
            clan newClan = new clan(
                nomC.getText(),  // Nombre del clan
                Integer.parseInt(nivellC.getText()),  // Nivel del clan, convertido de String a int
                Integer.parseInt(copasC.getText()),   // Copas del clan, convertido de String a int
                Integer.parseInt(idAdmin.getText()),    // Id del admin del clan, convertido de String a int
                clanType.getText()  // Tipo de clan
            );
            // Llamamos al método `create` de la clase `DaoGeneric` para almacenar el jugador en la base de datos
            DaoGeneric.getInstance().create(newClan);

        } catch (Exception e) {
            // Si ocurre un error al guardar el jugador (por ejemplo, datos no válidos), se muestra un mensaje de error
            JOptionPane.showMessageDialog(null, "Error al guardar " + e.getMessage());
        }
    }//GEN-LAST:event_crearClan

    private void esborrarClan(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_esborrarClan
        try {
            // Obtenemos el id del clan que se quiere eliminar desde el campo de texto
            int delClan = Integer.parseInt(idClan.getText());
            // Llamamos al método `delete` de la clase `DaoGeneric` para eliminar el clan con el id especificado
            DaoGeneric.getInstance().deleteClan(delClan);

        } catch (Exception e) {
            // Si ocurre un error (por ejemplo, el id no es válido o no se encuentra el clan), se muestra un mensaje de error
            JOptionPane.showMessageDialog(null, "Error al eliminar " + e.getMessage());
        }
    }//GEN-LAST:event_esborrarClan

    private void actualitzarTaulaClans(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualitzarTaulaClans
        // Obtenemos la lista de los clanes desde la base de datos mediante DaoGeneric
        List llista = (List) DaoGeneric.getInstance().readClan();
        // Obtenemos el modelo de la tabla de clanes en la interfaz gráfica
        DefaultTableModel model = (DefaultTableModel) taulaClan.getModel();
        // Limpiamos las filas actuales de la tabla
        model.setRowCount(0);

        // Iteramos sobre la lista de clans y agregamos cada clan como una nueva fila en la tabla
        for (int i = 0; i < llista.size(); i++) {
            clan actClan = (clan) llista.get(i);  // Obtenemos un clan de la lista
            Vector oneRow = new Vector();  // Creamos un vector que representa una fila en la tabla

            // Agregamos los datos del clan a la fila (cada columna en la tabla)
            oneRow.add(Integer.toString(actClan.getIdClan())); // Columna de Id del clan
            oneRow.add(actClan.getNomC());  // Columna de Nombre del clan
            oneRow.add(Integer.toString(actClan.getNivellC()));  // Columna del Nivel del clan
            oneRow.add(Integer.toString(actClan.getCopasC()));  // Columna de Copas del clan
            oneRow.add(Integer.toString(actClan.getIdAdmin()));  // Columna del id del Admin
            oneRow.add(actClan.getClanType());  // Columna del tipo de clan

            // Agregamos la fila a la tabla
            model.addRow(oneRow);
        }
        // Actualizamos el modelo de la tabla con los nuevos datos
        taulaClan.setModel(model);
    }//GEN-LAST:event_actualitzarTaulaClans

    private void esborrarJugador(java.awt.event.ActionEvent evt) { 
    try {
        // Obtenemos el id del jugador que se quiere eliminar desde el campo de texto
        int jug = Integer.parseInt(id.getText()); 
        // Llamamos al método `delete` de la clase `DaoGeneric` para eliminar el jugador con el id especificado
        DaoGeneric.getInstance().delete(jug);
        
        } catch (Exception e) {
            // Si ocurre un error (por ejemplo, el id no es válido o no se encuentra el jugador), se muestra un mensaje de error
            JOptionPane.showMessageDialog(null, "Error al eliminar " + e.getMessage());
        }
    }                              

    private void actualitzarTaulaJug(java.awt.event.ActionEvent evt) { 
        // Obtenemos la lista de jugadores desde la base de datos mediante DaoGeneric
        List llista = (List) DaoGeneric.getInstance().readJugador();
        // Obtenemos el modelo de la tabla de jugadores en la interfaz gráfica
        DefaultTableModel model = (DefaultTableModel) TaulaJugadors.getModel();
        // Limpiamos las filas actuales de la tabla
        model.setRowCount(0);

        // Iteramos sobre la lista de jugadores y agregamos cada jugador como una nueva fila en la tabla
        for (int i = 0; i < llista.size(); i++) {
            jugador jug = (jugador) llista.get(i);  // Obtenemos un jugador de la lista
            Vector oneRow = new Vector();  // Creamos un vector que representa una fila en la tabla

            // Agregamos los datos del jugador a la fila (cada columna en la tabla)
            oneRow.add(Integer.toString(jug.getId())); // Columna de Id
            oneRow.add(jug.getNom());  // Columna de Nombre
            oneRow.add(Integer.toString(jug.getNivell()));  // Columna de Nivel
            oneRow.add(Integer.toString(jug.getCopes()));  // Columna de Copas
            oneRow.add(Integer.toString(jug.getOro()));  // Columna de Oro
            oneRow.add(Integer.toString(jug.getGemes()));  // Columna de Gemas
            oneRow.add(Integer.toString(jug.getEstrelles()));  // Columna de Estrellas

            // Agregamos la fila a la tabla
            model.addRow(oneRow);
        }
        // Actualizamos el modelo de la tabla con los nuevos datos
        TaulaJugadors.setModel(model);
    }                                    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel NivellLable;
    private javax.swing.JLabel NomLable;
    private javax.swing.JTable TaulaJugadors;
    private javax.swing.JTable TaulaPartides;
    private javax.swing.JButton actualitzarTaulaClans;
    private javax.swing.JButton actualitzarTaulaJug;
    private javax.swing.JButton actualitzarTaulaPartides;
    private javax.swing.JTextField clanType;
    private javax.swing.JLabel clanTypeLable;
    private javax.swing.JTextField copasC;
    private javax.swing.JLabel copasCLable;
    private javax.swing.JTextField copes;
    private javax.swing.JLabel copesLabel;
    private javax.swing.JButton crearClan;
    private javax.swing.JButton crearJugador;
    private javax.swing.JButton crearPartida;
    private javax.swing.JButton esborrarClan;
    private javax.swing.JButton esborrarJugador;
    private javax.swing.JButton esborrarPartida;
    private javax.swing.JTextField estrelles;
    private javax.swing.JLabel estrellesLabel;
    private javax.swing.JTextField gemes;
    private javax.swing.JLabel gemesLabel;
    private javax.swing.JTextField id;
    private javax.swing.JTextField idAdmin;
    private javax.swing.JLabel idAdminLable;
    private javax.swing.JTextField idClan;
    private javax.swing.JLabel idClanLable;
    private javax.swing.JLabel idLable;
    private javax.swing.JLabel idLable2;
    private javax.swing.JTextField idPart;
    private javax.swing.JTextField idjug1;
    private javax.swing.JLabel idjug1Label;
    private javax.swing.JTextField idjug2;
    private javax.swing.JLabel idjug2Label;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextField nivell;
    private javax.swing.JTextField nivellC;
    private javax.swing.JLabel nivellLabel;
    private javax.swing.JTextField nom;
    private javax.swing.JTextField nomC;
    private javax.swing.JLabel nomLabel;
    private javax.swing.JTextField oro;
    private javax.swing.JLabel oroLabel;
    private javax.swing.JTextField resultat;
    private javax.swing.JLabel resultatLabel;
    private javax.swing.JTable taulaClan;
    private javax.swing.JTextField temps;
    private javax.swing.JLabel tempsLable;
    private javax.swing.JTextField tipus;
    private javax.swing.JLabel tipusLabel;
    // End of variables declaration//GEN-END:variables
}
